{"version":3,"sources":["component/TaskItem.jsx","component/TaskList.jsx","component/ToDoListPage.jsx","App.js","serviceWorker.js","index.js"],"names":["TaskItem","_this","this","react_default","a","createElement","Fragment","className","props","item","type","onClick","onDelete","aria-hidden","Component","TaskList","_this$props","editing","items","map","component_TaskItem","key","ToDoListPage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleDelete","value","addTask","state","filter","c","setState","strikeTask","handleClick","bind","assertThisInitialized","handleChange","index","console","log","concat","event","target","title","component_TaskList","placeholder","name","onChange","App","component_ToDoListPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01f74269.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass TaskItem extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <li className=\"list-group-item list-group-item-primary\">\r\n                    <label>{this.props.item}</label>\r\n                    <button type=\"button\"\r\n                        onClick={() => this.props.onDelete(this.props.item)}\r\n                        className=\"close\"><span aria-hidden=\"true\">&times;</span></button>\r\n                </li>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskItem;","import React, {Component} from 'react';\r\nimport TaskItem from '../component/TaskItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TaskList extends Component {\r\n    render() {\r\n\r\n        const {editing, onDelete, items } = this.props;\r\n        \r\n        return (\r\n            <div className=\"col-sm-12\">\r\n                <ul className=\"list-group bg-dark text-left\">\r\n                    {items.map( item => (\r\n                        <TaskItem\r\n                            key={item}\r\n                            editing={editing}\r\n                            item={item}\r\n                            onDelete={onDelete}/>\r\n                    ))}\r\n                </ul>\r\n            </div>            \r\n        );\r\n    }\r\n\r\n}\r\n\r\nTaskList.propTypes = {\r\n    items : PropTypes.array.isRequired,\r\n    editing : PropTypes.bool,\r\n    onDelete : PropTypes.func.isRequired,\r\n}\r\n\r\nexport default TaskList;","import React, {Component} from 'react';\r\nimport TaskList from '../component/TaskList';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ToDoListPage extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            value : '',\r\n            addTask : [],\r\n            strikeTask : false,\r\n        }\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n    }\r\n\r\n    handleClick(index) {\r\n        console.log('I am clicked');\r\n        if(this.state.value === \"\"){\r\n            return (\r\n                <p className=\"alert alert-warning\">Please enter a valid task</p>\r\n            );\r\n        } else {\r\n            this.setState( state => {\r\n                const addTask = state.addTask.concat(state.value);\r\n    \r\n                return {\r\n                    addTask,\r\n                    value : \"\",\r\n                }\r\n            });\r\n        }       \r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({value : event.target.value});\r\n    }\r\n\r\n    handleDelete = (value) => {\r\n        const addTask = this.state.addTask.filter(c => c !== value);\r\n        this.setState({addTask : addTask});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"container\"> \r\n                    <div className=\"row shadow-lg p-3 mb-5 rounded\"> \r\n                        <div className=\"col-sm-12\">              \r\n                            <h1 className=\"display-3\">{this.props.title}</h1>\r\n                        </div>\r\n                        <TaskList \r\n                            editing={this.state.strikeTask} \r\n                            items={this.state.addTask}\r\n                            onDelete = {this.handleDelete} />                           \r\n                        <div className=\"col-sm-12\">\r\n                            <div className=\"input-group input-group-lg mt-3\">\r\n                                <input className=\"form-control\" placeholder=\"Type your tasks\" type=\"text\" name=\"taskName\" value={this.state.value} onChange={this.handleChange} />\r\n                                <div className=\"input-group-append\">\r\n                                    <button className=\"btn btn-secondary btn-lg\" onClick={this.handleClick} type=\"submit\">Add Task</button>\r\n                                </div>                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>         \r\n        );\r\n    }\r\n}\r\n\r\nToDoListPage.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n}\r\n\r\nexport default ToDoListPage;","import React, { Component } from 'react';\r\nimport ToDoListPage from './component/ToDoListPage';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\"> \r\n        <div className=\"App-header\">\r\n          <ToDoListPage title = 'To Do List App' />\r\n        </div>     \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}